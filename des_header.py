# Chris Hicks 08-10-2018

# 48-bit output Expansion permutation E.
E = [31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 9, 10, 11, 12, 
	 11, 12, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 19, 20, 21, 
	 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 28, 29, 30, 31, 0]

E_inv = [47, 2, 3, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 24, 
         25, 26, 27, 30, 31, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 46,]


# 32-bit Output purmutation
# 		  0  1   2   3   4   5   6   7   8   9  10  11  12  13  14 15 16  17  18  19  20  21  22  23  24  25  26 27  28  29  30  31
P =     [15, 6, 19, 20, 28, 11, 27, 16,  0, 14, 22, 25,  4, 17, 30, 9, 1, 7 , 23, 13, 31, 26,  2,  8, 18, 12, 29, 5, 21, 10,  3, 24]
P_inv = [8, 16, 22, 30, 12, 27,  1, 17, 23, 15, 29,  5, 25, 19,  9, 0, 7, 13, 24,  2,  3, 28, 10, 18, 31, 11, 21, 6,  4, 26, 14, 20]


# Des SBoxes
S_BOX = [
         
[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
 [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
 [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
 [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
],

[[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
 [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
 [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
 [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
],

[[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
 [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
 [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
 [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
],

[[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
 [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
 [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
 [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
],  

[[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
 [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
 [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
 [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
], 

[[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
 [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
 [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
 [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
], 

[[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
 [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
 [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
 [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
],
   
[[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
 [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
 [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
 [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
]
]

# Inverse of DES S-Boxes in Feistel function
# Returns inner four bits, outer two bits are implied by list position
# e.g. 0 returns [13,12,8,11] and so the row bits for list element 0=13 is 00
# for list element 1=12 is 01
SBoxInv = [
{0: [14, 0, 15, 13], 1: [3, 7, 1, 6], 2: [4, 5, 6, 3], 3: [8, 14, 12, 10], 4: [1, 3, 0, 4], 5: [12, 13, 14, 8], 6: [10, 9, 5, 14], 7: [15, 2, 11, 7], 8: [7, 15, 3, 2], 9: [13, 12, 10, 5], 10: [9, 8, 13, 12], 11: [6, 11, 7, 9], 12: [11, 10, 9, 1], 13: [2, 6, 4, 15], 14: [0, 4, 2, 11], 15: [5, 1, 8, 0]},
{0: [13, 9, 0, 12], 1: [1, 10, 7, 3], 2: [10, 5, 14, 7], 3: [6, 0, 13, 4], 4: [7, 2, 5, 6], 5: [14, 15, 8, 13], 6: [4, 12, 11, 9], 7: [9, 3, 2, 10], 8: [2, 6, 9, 1], 9: [8, 13, 12, 15], 10: [15, 11, 4, 2], 11: [5, 14, 3, 8], 12: [12, 8, 10, 11], 13: [11, 1, 6, 0], 14: [3, 7, 1, 14], 15: [0, 4, 15, 5]},
{0: [1, 2, 7, 3], 1: [8, 15, 9, 0], 2: [14, 8, 10, 14], 3: [5, 4, 6, 11], 4: [13, 5, 2, 8], 5: [7, 10, 12, 13], 6: [4, 6, 1, 4], 7: [11, 1, 15, 7], 8: [15, 9, 4, 6], 9: [2, 3, 3, 5], 10: [0, 7, 13, 1], 11: [12, 13, 8, 12], 12: [10, 12, 11, 15], 13: [9, 0, 0, 2], 14: [3, 11, 14, 10], 15: [6, 14, 5, 9]},
{0: [4, 6, 3, 2], 1: [8, 12, 9, 5], 2: [9, 10, 13, 14], 3: [3, 7, 10, 0], 4: [14, 8, 15, 9], 5: [11, 3, 12, 10], 6: [5, 4, 1, 3], 7: [0, 9, 6, 13], 8: [10, 1, 14, 7], 9: [6, 15, 2, 8], 10: [7, 13, 0, 4], 11: [12, 2, 5, 11], 12: [13, 11, 4, 12], 13: [1, 0, 7, 6], 14: [2, 14, 11, 15], 15: [15, 5, 8, 1]},
{0: [13, 9, 14, 10], 1: [3, 7, 2, 4], 2: [0, 2, 1, 6], 3: [10, 12, 13, 15], 4: [2, 4, 0, 13], 5: [9, 8, 11, 14], 6: [7, 15, 12, 8], 7: [4, 5, 6, 3], 8: [8, 14, 7, 1], 9: [15, 13, 9, 11], 10: [5, 11, 4, 12], 11: [6, 1, 3, 0], 12: [1, 3, 10, 2], 13: [12, 6, 5, 7], 14: [14, 0, 15, 5], 15: [11, 10, 8, 9]},
{0: [8, 12, 9, 13], 1: [1, 9, 12, 10], 2: [5, 3, 4, 2], 3: [10, 14, 7, 1], 4: [11, 2, 10, 0], 5: [14, 7, 3, 5], 6: [6, 8, 15, 12], 7: [13, 4, 8, 11], 8: [7, 15, 5, 14], 9: [4, 6, 0, 4], 10: [2, 0, 11, 7], 11: [15, 13, 14, 8], 12: [0, 5, 6, 3], 13: [9, 10, 13, 15], 14: [12, 11, 1, 9], 15: [3, 1, 2, 6]},
{0: [5, 1, 12, 10], 1: [15, 6, 0, 4], 2: [2, 12, 15, 13], 3: [8, 9, 5, 14], 4: [0, 4, 1, 5], 5: [12, 10, 13, 9], 6: [14, 15, 10, 0], 7: [11, 3, 6, 7], 8: [6, 14, 11, 3], 9: [10, 5, 14, 8], 10: [13, 7, 8, 6], 11: [1, 2, 2, 1], 12: [9, 11, 4, 15], 13: [7, 0, 3, 2], 14: [3, 8, 7, 12], 15: [4, 13, 9, 11]},
{0: [13, 12, 8, 11], 1: [7, 0, 3, 1], 2: [1, 15, 7, 0], 3: [10, 5, 13, 12], 4: [3, 7, 2, 4], 5: [12, 9, 14, 13], 6: [4, 10, 9, 14], 7: [15, 6, 0, 3], 8: [2, 3, 15, 6], 9: [9, 14, 4, 10], 10: [8, 4, 10, 5], 11: [6, 11, 1, 15], 12: [14, 8, 5, 9], 13: [0, 2, 11, 7], 14: [11, 13, 6, 2], 15: [5, 1, 12, 8]}
]

# Inverse permutatiuon method 
# https://stackoverflow.com/questions/9185768/inverting-permutations-in-python
def inv(perm):
	inverse = [0] * (len(perm))
	for i, p in enumerate(perm):
		inverse[p] = i
	return inverse

def invSBox(sbox):
	inverse = {}
	for itr in range(16):
		sInv = [] 
		for row, sub in enumerate(sbox):
			for i,s in enumerate(sub):
				if s == itr:
					sInv += [i]
					break
		inverse[itr] = sInv
	return inverse

# Apply pbox to nbits of input_data of bitwise and return result
def apply_pbox_bitwise(input_data, pbox, nbits):
    result = 0
    for bit in range(nbits):
        if (input_data & (1 << bit)):
            result |= (1 << pbox[bit])

    return result

def main():
	#print([p for p in P])
	#print(inv(P))
	#print([e for e in E])
	#print(inv(E))
	print(invSBox(S_BOX[0]))

	return 0

if __name__ == '__main__':
	main()